---
title: Developing Quality
desc: Thinking broadly about quality
cat: testing
slides: true
---
:h2 Logistics

* :topic_link :successful_term_projects

:slide_bigtitle Developing Quality Software

* Why do people think this is important?
* How do you define quality?
* It's quite a lot more than testing
* It's a set of processes and practices
* Our undertanding of these are constantly evolving
* The *devops* movement

:slide_title Best Practices

*I learned some of the ideas, structure and terminology from this book: [Accelerate - The Science of Lean Software and DevOps: Building and Scaling High Performing Technology Organizations](https://amzn.to/3Chvvz7). If you are really interested in learning more, I would recommend it as a great resource.*

* Version control
* Automated Tests and Suites
* Trunk based development
* Continuous Integration
* Deployment automation
* Continuous delivery
* Test Data Management

:slide_title Version Control

* Our use of git and github has us on the right path
* Git is more than just a source code management system
* It grew up with and around quality software processes
* It touches many of the practices
* Not just source code but "Configuration as code"
* In Rails, look at config/environments/*.rb

:slide_title Automated test suites

* Two sides of the same coin
* Writing tests, the right tests, and enough tests
* Automating the running of tests, at the right time, and the right subset
* In Rails, `rails test`, `minitest`, and many other building blocks

:slide_title Trunk Based Development

* Proper use of branches
* Deciding when a branch should be created
* Deciding that branches should be merged back within a day or so

:slide_title Continuous Integration

* Closely related
* Integration here means combining changes from different developers
* Continuously face up to merge conflicts
* Don't let them fester

:slide_title Deployment Automation

* What is deployment? How often is good enough?
* What should trigger a deployment
* A deployment pipeline
* Role of code reviews in the deployment
* Who can review code, what is reasonable for a review?
* Do code reviews slow you down?

:slide_title Continious Delivery

* Next-level stuff
* Combining all the elements above in a way that focuses on speed
* Minimize time between committing new code and it's delivery to production

:slide_title Test Data Management
* A large suite of tests requires test data (or test fixtures)
* Many forms of test data - sometimes in data files, in yaml files, in actual code
* Certain kinds of changes in tests corresponding changes in the test data
* The test data requires version control

:lecture_end