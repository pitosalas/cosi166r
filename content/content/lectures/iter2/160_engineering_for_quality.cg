---
title: Developing Quality
desc: Thinking broadly about quality
cat: testing
slides: true
---
:h2 Logistics
* Attendance
* :topic_link :successful_term_projects

:slide_bigtitle Developing Quality Software

* Why do people think this is important?
* How do you define quality?
* It's quite a lot more than testing
* It's a set of processes and practices
* Our undertanding of these are constantly evolving
* The *devops* movement

:slide_title Best Practices

*I learned some of the ideas, structure and terminology from this book: [Accelerate - The Science of Lean Software and DevOps: Building and Scaling High Performing Technology Organizations](https://amzn.to/3Chvvz7). If you are really interested in learning more, I would recommend it as a great resource.*

* Version control
* Automated Tests and Suites
* Continuous Integration
* Deployment automation
* Continuous delivery

:slide_title Version Control

* Our use of git and github has us on the right path
* Git is more than just a source code management system
* It grew up with and around quality software processes
* It touches many of the practices
* Not just source code but "Configuration as code" (In Rails, look at config/environments/*.rb)
* Recommended Branching Structure (so called [Git Flow](https://www.atlassian.com/git/tutorials/comparing-workflows/gitflow-workflow))
* Main Branch - what is running on Heroku
* Develop Branch - Fully working merge from all devs
* Feature Branches - Individual devs work, and merge to Develop **at least** once a week

:slide_title Automated test suites

* Two sides of the same coin
* Writing tests, the right tests, and enough tests
* Automating the running of tests, at the right time, and the right subset
* In Rails, `rails test`, `minitest`, and many other building blocks

:slide_title Continuous Integration

* Integration here means combining changes from different developers
* Continuously face up to merge conflicts
* Don't let them fester
* Set things up so whenever you merge with `develop` branch, the tests run automatically

:slide_title Deployment Automation

* What is deployment? How often is good enough?
* What should trigger a deployment
* A deployment pipeline
* Role of code reviews in the deployment
* Who can review code, what is reasonable for a review?
* Do code reviews slow you down?
* Set things up so whenbever you merge with `main`, tests are run, and the push to heroku occurs

:slide_title Continious Delivery

* Next-level stuff
* Combining all the elements above in a way that focuses on speed
* Minimize time between committing new code and it's delivery to production


:lecture_end