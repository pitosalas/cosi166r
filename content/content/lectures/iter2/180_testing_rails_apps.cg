---
title: Testing Rails Applications
desc: How to connect  testing strategy to the development process
cat: testing
slides: true
---
:h3 Logistics
* Attendance

:slide_bigtitle 1. Proper branching process: [Gitflow Branching](https://www.atlassian.com/git/tutorials/comparing-workflows/gitflow-workflow)

:image :gitflow

* `main` Branch is deployed to production
* `development` branch is the one we work on
* `feature` branches are created from `development` and merged back into it
* Important: feature branches should not last longer than a week or so

:slide_bigtitle 2. Automated testing

:image :testing_pyramid

* You will have more tests from the bottom than from the top
* Tests near the top later as your functionality stabilizes
* In order to write a test you must **know what is correct behavior**
* Have a single command which runs all the tests and any individual or subset
* Depending on your setup you can usually find a UI to do it

:slide_bigtitle 3. Test Data

* Called "test fixtures"
* Are generally created on the fly for each test
* They should be fast to create and tear down
* Option 1: Rails Fixtures
* Option 2: On the fly coding in test setup
* Option 3: Fixture factory (e.g. FactoryBot)
* Look at code...

:slide_bigtitle 4. Continuous Integration

* Every developer, before making any changes
* Creates a branch
* Test merges main to branch
* Merges branch back to main

:slide_title Base state

* Branch `main` contains consistent and working code
* Running `rails test` produces no errors
* Deployed on Heroku
* Branch `development` contains the latest code from all developers
* It usually passes all tests
* It is not deployed

:slide_title Developer starts work on something new

* Create a new branch (`something-new`) and check it out
* Do a bunch of coding
* You can safely add and push because you are on your branch
* Run `rails test` from time to time
* Merge *from* `development` to your branch (`git merge main`)

:slide_title Developer is done with something new

* `rails test` one last time to make sure it's green
* Merge *from* `main` to your branch (`git merge main`)
* Work until problems are fixed (this is the `continuous integration` part)
* Now move to main branch (`git checkout main`)
* And merge *from* something-new into `main`
* If you did it right, there should be no conflicts and tests should pass
* Which brings you back to base state.

:slide_title Console session

:source_begin :bash

$ git branch fix_bootstrap_setup
$ git checkout fix_bootstrap_setup

... code ... code ... code

$ rails test
$ git add --all; git commit -m "removed gem, just using the CDN"; git push

... debug debug debug ...

$ git merge development # brings the latest development branch into my private branch

... handle merge conflicts util rails test is all green again

$ rails test
$ git add --all; git commit -m "removed gem, just using the CDN"; git push
$ git merge development # should have no differences
$ git checkout development
$ git merge fix_bootstrap_setup # Now pull my branch into main
$ git add --all; git commit -m "merge branch to development"; git push
$ rails test # hopefully all tests still pass
$ git push # push development branch - which triggers ci

:source_end

:slide_bigtitle 5. Continuous Testing

* Whenever `development` branch is pushed to Github
* Automatically run all the tests and report to developers
* Failing tests require developers to engage and fix the bugs asap
* Do not tolerate failing tests in development branch!
* Argues for very short lived branches

:slide_bigtitle 6. Continuous deploymenbt

* Whenever development is merged into main
* All tests are run
* Potentially the latest code is deployed to the server
* Note it doesn't have to be Heroku

:slide_title Degrees of deployment

* There are degrees of deployment
* Depending on the audience
* From private, semi-private, semi-public, public
* Lower risk -> Higher Risk
* But more stages mean more complexity

:slide_title Example Stages

* Producton: For paying customers, e.g. www.eroom.com
* Staging: We think its ready but just one last check. e.g. staging.eroom.com or www.eroom.com/staging
* QA: Quality assurance team kicks the tires, e.g. www.eroom.com/QA

:slide_title Heroku

* What's happening?
* Platform As a Service
* Virtualization and Docker
* Lots of alternatives: render.com, digitalocean.com, fly.io, www.engineyard.com and more

:lecture_end
