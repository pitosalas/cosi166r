---
title: Responsive UI 1
desc: Using Ajax with Rails to make websites more responsive
cat: advanced
slides: true
---
:h2 Logistics

* Checkin questions!

:topic_include :ajax

:slide_subtitle Usual process in web server

* Browser issues an HTTP Request
* Server responds by running action, which generates html
* HTML is used for the response to the browser
* Browser displays it

:slide_subtitle Ajax process

* Browser issues an HTTP request
* Request is issued for remote processing
* "In background"
* `local: false`
* Server responds by running action, which generates javascript
* Returned to the browser
* Browser executes it

:slide_subtitle Javascript processing

* JS is a general purpose language
* Browser exposes the DOM as `document.`
* Executing js can access and modify the

:slide_title Forms Review

* The default with form_with is **local: true**
* Think about what the submit button does:
  * for **local:true**, it does a post or patch, requesting .html response
  * for **local:false**, it does a post or patch, requesting .js response
  * if url was .json, it does a post or patch, requesting .json back

* How to ajaxify a form
  * **Decide precisely what you want to do**
  * Example where we change 'date updated' with ajax

:slide_title Code Review

* Look at [rails ajax_demo](https://github.com/pitosalas/public_samples/tree/master/rails/rails_ajax_demo)

:slide_title Server Push

* Not a real term :)
* Many different ways of approaching. Sort of immature right now
* Key techniques are:
  * Periodic background polling by browser
  * WebSockets and variants which maintain an open connection to server
  * Rails 5 Action Cable
* Some links to study further:
  * New Service to support Pusher on a separate Service: [Pusher Service - free push](http://pusher.com)
  * How to use WebSockets on Heroku: [WebSockets on Heroku](https://devcenter.heroku.com/articles/ruby-websockets)
  * Rails Action Cable, [YouTube Demo of Rails 5 Action Cable](https://www.youtube.com/watch?v=n0WUjGkDFS0)
* Look at FormsDemo for Pusher
