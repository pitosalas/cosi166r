---
title: Writing Good Software
desc: Lets talk about crafting good software
slides: true
cat: advanced
hwref: week13
---
:h2 Logistics

* Checkin Questions

:topic_include :code_smells
:topic_include :rails_smells
:topic_include :refactoring


:slide_title References

* [Refactoring Techiniques](http://www.integralist.co.uk/posts/refactoring-techniques.html): The problem with this article is that it tries to explain too many patterns. You don't need them all to begin refactoring. Start with the most common case, ["extract Method"](http://www.integralist.co.uk/posts/refactoring-techniques.html#13) and build up your toolbox accordingly.
* Here's a catalog of the classic [Refactoring](https://sourcemaking.com/refactoring) patterns.
* A pretty good tutorial covering some of the [Ruby/Rails Code Smells Basics](https://code.tutsplus.com/series/ruby-rails-code-smell-basics--cms-960)
* [Decoupling Rails Componenets](https://www.toptal.com/ruby-on-rails/decoupling-rails-components?utm_campaign=blog_post_decoupling_rails_components)
* :topic_link :se_rules_of_thumb
* [Quick Summary of Martin Fowler's "Refactoring"](https://github.com/HugoMatilla/Refactoring-Summary)
