---
title: Deeper into forms and views
desc: Additional concepts and techniques
hwref: week10
slides: true
cat: rails
---
:h2 Logistics

* Check in questions
* Watched almost all the videos so far. Thanks for all of your efforts
  1. Many of the apps so far are basically a login and a discussion list of some kind
  1. Please make sure you go beyond that. The discussion forum is right out of the book!
* Matter of historical interest: It was at this lecture that last year we first went remote

:slide_title Review Basics

* Why form handling typically require 2 HTTP requests, two actions, two views
* Partial views and rendering
* Each of the actions in a simple case, e.g. categories_controller
* Before-action, and setting up of the 'common parameters'
* "Strong parameters"

:slide_title Forms that come from more than one model
* Look at an example: [FormsDemo](https://github.com/pitosalas/public_samples/tree/master/rails/formsdemo)
  1. URL
  1. controller
  1. View

:slide_title Review: Context setting

* URLs have 0 to n "parameters"
* Helpers must include them too
* Actions must set them up
* Look at comments_controller
* Look at form_with in this case

:slide_title Context setting beyond the ids

* Anything you will need in the view, you should set up in the action
* Look at ItemsController#edit and how it sets up @categories and @category
* Look at views/items/_form and how it uses those

:slide_title Where should code go?

* This can be more confusing than you think
* Remember: as little code in the view as possible
* Remember 2: as little code in the controller as possible
* So, where then? models and other non-rails classes (POROs)
* Best is when you write code with NO rails dependency! (odd, right?)
* Improves testability, modularity and reusability!
* models should contain any code
  * Legitimately is related to just the 'persisted data'
  * Confusing when you need a method that touches two models

:slide_title Respect your database!

* Notice how many calls to the database are needed to display a page
* Bad sign: O(n) database calls, where n = number of rows displayed
* More sophisticated ActiveRecord techniques to have one call do more work
* Let's take a look at the home page

:lecture_end